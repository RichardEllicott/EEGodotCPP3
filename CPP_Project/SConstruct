#!/usr/bin/env python
import os
import sys
from subprocess import call

##
## AUTOMATICLY DOWNLOAD AND COMPILE GODOT 4.3 BINDINGS
## https://github.com/godotengine/godot-cpp/tree/4.3
##
godot_cpp_dir = "godot-cpp/"
if not os.path.exists(godot_cpp_dir):
    print("Downloading godot-cpp 4.3 branch...")
    call(["git", "clone", "-b", "4.3", "--single-branch", "https://github.com/godotengine/godot-cpp.git", godot_cpp_dir])
    print("Building godot-cpp...")
    call(["scons", "-C", godot_cpp_dir, "platform=linux", "generate_bindings=yes"])



env = SConscript("godot-cpp/SConstruct")


## AUTOMATICLY DOWNLOAD AND COMPILE EXTRAS
## download muparser, warning depending on muparser when it can change could be a bit dangerous
## maybe lock this to a version at some point (8/12/2024)
muparser_dir = 'external/muparser/'
if not os.path.exists(muparser_dir):
    print("muParser not found, downloading...")
    call(["git", "clone", "https://github.com/beltoforion/muparser.git", muparser_dir])


# env.Append(CPPPATH=['external/muparser/include'])  # Include directory for muParser headers
# env.Append(LIBPATH=['external/muparser/lib'])  # Library directory for compiled muParser
# env.Append(LIBS=['muparser'])  # Link the muParser library


# env.Append(CPPPATH=[muparser_dir])  # Include path for headers
# env.Append(SOURCES=[
#     muparser_dir + '/src/muParser.cpp',
#     muparser_dir + '/src/muParserBase.cpp',
#     muparser_dir + '/src/muParserBytecode.cpp',
#     muparser_dir + '/src/muParserCallback.cpp',
#     muparser_dir + '/src/muParserError.cpp',
#     muparser_dir + '/src/muParserTokenReader.cpp',
# ])
## endregion

## WARNING CANT GET THIS WORKING!!!




# For reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# tweak this if you want to use different folders, or more folders, to store your source code in.
env.Append(CPPPATH=["src/"])
sources = Glob("src/*.cpp")

if env["platform"] == "macos":
    library = env.SharedLibrary(
        "demo/bin/libgdexample.{}.{}.framework/libgdexample.{}.{}".format(
            env["platform"], env["target"], env["platform"], env["target"]
        ),
        source=sources,
    )
elif env["platform"] == "ios":
    if env["ios_simulator"]:
        library = env.StaticLibrary(
            "demo/bin/libgdexample.{}.{}.simulator.a".format(env["platform"], env["target"]),
            source=sources,
        )
    else:
        library = env.StaticLibrary(
            "demo/bin/libgdexample.{}.{}.a".format(env["platform"], env["target"]),
            source=sources,
        )
else:
    library = env.SharedLibrary(
        "demo/bin/libgdexample{}{}".format(env["suffix"], env["SHLIBSUFFIX"]),
        source=sources,
    )

Default(library)
